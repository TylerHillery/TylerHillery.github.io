{
  "hash": "bea58c6677613bd3d17418d6fb9e0ffc",
  "result": {
    "markdown": "---\ntitle: Python in a Nutshell\ndescription: 'My notes on [Python in a Nutshell](https://a.co/d/crDbxOD) by Alex Martelli, Anna Martelli Ravenscroft, Steven Holden, Paul McGuire.'\nauthor: Tyler Hillery\ndate: '2024-01-06'\nimage: ./python_in_a_nutshell.jpg\nfilters:\n  - social-share\nshare:\n  permalink: 'https://tylerhillery.com/notes/python-in-a-nutshell/'\n  description: null\n  twitter: true\n  facebook: false\n  reddit: true\n  stumble: false\n  tumblr: false\n  linkedin: true\n  email: true\n  mastodon: true\ncategories:\n  - Technical Books\n  - In Progress\nexecute:\n  echo: true\n  error: true\n---\n\n------------------------------------------------------------------------\n\n# Preface\n\n> While you can read this volume linearly from the beginning, we also aim for it to be a useful reference for the working programmer. You may choose to index to locate items of interest, or to read specific chapters for coverage their particular topics.\n\nI don't plan on reading this book from start finish. Below are the chapters I plan on reading\n\n- Part II, Core Python Language and Built-ins\n    - Chapter 5, \"Type Annotations\"\n- Part III, Python Library and Extension Modules\n    - Chapter 11. File and Text Operations\n    - Chapter 12. Persistence and Databases\n    - Chapter 15. Concurrency: Threads and Process\n- Part IV, Network and Web Programming\n    - Chapter 18. Networking Basics\n    - Chapter 19. Client-Side Networking Protocol Modules\n    - Chapter 20. Serving HTTP\n\n# Part II, Core Python Language and Built-ins\n\n## Chapter 5. Type Annotations\n\n-   Type annotations are *not* enforced at runtime.\n\n-   \n\n    > ***PEP*** stands for Python Enhancement Proposal, a design document describing a new feature for python\n\n-   \n\n    > The `typing` module defines several `protocols`, which are similar to what some other languages call \"interfaces\". Protocols are abstract base classes intended to concisely express constraints on a type, ensuring it contains certain methods.\n\n    ::: {.callout-caution title=\"Use `cast` with Caution\" collapse=\"true\"}\n    > `cast` is a way of overriding any interfaces or prior annotations that may be present at particular place in your code. It may hide actual type errors in your code, rendering the type-checking pass incomplete or inaccurate.\n    :::\n\n-   \n\n    > ***Generics*** are types that define a template for classes that can adapt the type annotations of their method signatures based on one or more parameters.\n\n-   I like this general rule of thumb on when and now to add type annotations to new code\n\n    > the Two Function Rule: as soon as your script contains two functions or methods, go back and add type annotations to the method signatures, and any shared variables or types as necessary. Use `TypeDict` to annotate any `dict` structures that are used in place of classes, so that `dict` keys get clearly defined up front or get documented as you go; use `NamedTuples`(or `dataclasses`: some of the book's authors *strongly* prefer the later option) to define the specific attributes for those data \"bundles\"\n\n# Part III, Python Library and Extension Modules\n\n## Chapter 11. File and Text Operations\n\n-   ***File Buffering*** is where data can be temporarily held in memory on the way to or from the file.\n\n-   ***Random Access*** files allows moving forward and back within the file, or jumping to read or write at a particular location in the file.\n\n## Chapter 12. Persistence and Databases\n\n-   \n\n    > Python supplies several modules to ***serialize*** (save) Python objects to various kinds of byte streams and ***deserialize*** (load and re-create) Python objects back from streams. Serialization is also known as ***marshaling***, which means formatting for ***data interchange***\n\n-   I was not aware of the `psycopg3` package, I have always used `psycopg2`.\n\n## Chapter 15. Concurrency: Threads and Process\n\n-   \n\n    > ***Processes*** are instances of running programs that the operating system protects from on that another. They can communicate with each other by using ***interprocess communication (IPC)*** mechanisms.\n\n-   \n\n    > \\***Thread** is a flow of control that shares a global state with other threads inside a single process\n\n-   General rule of thumb: *I/O-bound* reach for async programming, *CPU Bound* reach for `multiprocessing` because in python the GIL ensures that only one Python-coded thread at a time can execute so `multithreading` isn't as effective\n\n# Part IV, Network and Web Programming\n\n## Chapter 18. Networking Basics\n\n-   The main *connection-oriented* protocol is the transmission control protocol.\n\n-   The main *connectionless* or *datagram* protocol use the User Datagram Protocol (UDP).\n\n-   ***Sockets*** give access to pipelines between independent endpoints, using a ***transport layer protocol*** to move information between those endpoints.\n\n-   Both UDP and TCP are carried over a common Internet Protocol (IP) network layer known as TCP/IP.\n\n## Chapter 19. Client-Side Networking Protocol Modules\n\n-   a URL is a string composed of several parts called *components*: the *scheme*, *location*, *path*, *query* and *fragment* e.g `scheme://lo.ca.ti.on/pa/th?qu=ery#fragment`\n\n## Chapter 20. Serving HTTP\n\n-   \n\n    > ***Common Gateway Interface (CGI)*** requires the server to run a separate program each time a client request dynamic content.\n\n    ::: {.callout-note title=\"Checkout HTTP: The Definitive Guide\"}\n    :::\n\n-   \n\n    > ***Web Server Gateway Interface (WSGI)*** is the standard way for all modern Python web development frameworks to interface with underlying web servers... WSGI is an *interface*, and that interface has two sides: the *web server/gateway side* and the *application/framework* side. The framework side's job is to provide a *WSGI application* object, a callable object respecting conventions in the PEP, and to connect the application object to the server by whatever means the specific sever documents. `Gunicorn` is an example WSGI server.\n\n-   ***ASGI*** is the async version of WSGI\n\n| Component             | Role                                                                                                                                                                                                                                                                            | WSGI          | ASGI                 |\n|-----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|----------------------|\n| Web Server            | Handling HTTP requests, serving static files (HTML, CSS, JavaScript and managing SLL/TSL for secure HTTPS connections. It's often used as a reverse proxy and load balancer as well forwarding requests to other servers in the background and returning responses to clients. | NGINX         | NGINX                |\n| GI Server             | Designed for handling HTTP traffic destined for Python code. It describes how a web server communicates with web applications. Acts as middleware between NGINX and web apps                                                                                                    | Gunicorn      | Uvicorn or Hypercorn |\n| GI Utility / Toolkit  | Commonly used by lightweight frameworks for various components to handle any functionality not strictly related to HTTP                                                                                                                                                         | Werkzueg      | Starlette\\*\\*        |\n| Application Framework | Provides the core tools and functionalities to create a web app such as routing, templates, RESTful request dispatching.                                                                                                                                                        | Django, Flask | FastAPI, Quart       |\n\n\n    *Starlette can also be used as a lightweight app framework*\n\n# Review\n\nI would take this review with a grain of salt as I only read select sections of this book that interested me. Overall I wasn't a big fan of how this book was structured. There was far too many tables with methods or attributes with their definition opposed to content from the authors. With that being said I still think there is tons of great information in this book but it should be used as a reference guide for when you want to look something up. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}