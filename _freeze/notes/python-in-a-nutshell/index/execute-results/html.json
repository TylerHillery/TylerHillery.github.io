{
  "hash": "7ebb6c9e5a2ccbcd70c5576009382b6d",
  "result": {
    "markdown": "---\ntitle: Python in a Nutshell\ndescription: 'My notes on [Python in a Nutshell](https://a.co/d/crDbxOD) by Alex Martelli, Anna Martelli Ravenscroft, Steven Holden, Paul McGuire.'\nauthor: Tyler Hillery\ndate: '2024-01-06'\nimage: ./python_in_a_nutshell.jpg\nfilters:\n  - social-share\nshare:\n  permalink: 'https://tylerhillery.com/notes/python-in-a-nutshell/'\n  description: null\n  twitter: true\n  facebook: false\n  reddit: true\n  stumble: false\n  tumblr: false\n  linkedin: true\n  email: true\n  mastodon: true\ncategories:\n  - Technical Books\n  - In Progress\nexecute:\n  echo: true\n  error: true\n---\n\n------------------------------------------------------------------------\n\n# Preface\n\n- > While you can read this volume linearly from the beginning, we also aim for it to be a useful reference for the working programmer. You may choose to index to locate items of interest, or to read specific chapters for coverage their particular topics.\n\n  I don't plan on reading this book from start finish. Below are the chapters I plan on reading\n\n  - Part II, Core Python Language and Built-ins\n    - Chapter 5, \"Type Annotations\"\n  - All of Part III, Python Library and Extension Modules\n  - All of Part IV, Network and Web Programming\n  - All of Part V, Extending, Distributing, and Version Upgrade and Migration\n\n# Part II, Core Python Language and Built-ins\n\n## Chapter 5. Type Annotations\n\n- Type annotations are *not* enforced at runtime.\n\n- > ***PEP*** stands for Python Enhancement Proposal, a design document describing a new feature for python\n\n- > The `typing` module defines several `protocols`, which are similar to what some other languages call \"interfaces\". Protocols are abstract base classes intended to concisely express constraints on a type, ensuring it contains certain methods. \n\n  :::{.callout-caution title=\"Use `cast` with Caution\" collapse=\"true\"}\n  > `cast` is a way of overriding any interfaces or prior annotations that may be present at particular place in your code. It may hide actual type errors in your code, rendering the type-checking pass incomplete or inaccurate.\n  :::\n\n- > ***Generics*** are types that define a template for classes that can adapt the type annotations of their method signatures based on one or more parameters.\n\n- I like this general rule of thumb on when and now to add type annotations to new code\n\n  > the Two Function Rule: as soon as your script contains two functions or methods, go back and add type annotations to the method signatures, and any shared variables or types as necessary. Use `TypeDict` to annotate any `dict` structures that are used in place of classes, so that `dict` keys get clearly defined up front or get documented as you go; use `NamedTuples`(or `dataclasses`: some of the book's authors *strongly* prefer the later option) to define the specific attributes for those data \"bundles\"\n\n# Part III, Python Library and Extension Modules\n\n## Chapter 11. File and Text Operations\n\n- ***File Buffering*** is where data can be temporarily held in memory on the way to or from the file.\n\n- ***Random Access*** files allows moving forward and back within the file, or jumping to read or write at a particular location in the file.\n\n## Chapter 12. Persistence and Databases\n\n- > Python supplies several modules to ***serialize*** (save) Python objects to various kinds of byte streams and ***deserialize*** (load and re-create) Python objects back from streams. Serialization is also known as ***marshaling***, which means formatting for ***data interchange***\n\n- \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}