{
  "hash": "678e2a73a26ed0f6d2d2bb786b6e8a12",
  "result": {
    "markdown": "---\ntitle: Data Engineering with dbt\ndescription: 'My notes on [Data Engineering with dbt](https://a.co/d/dcbdZxQ) by Roberto Zagni'\nauthor: Tyler Hillery\ndate: '2024-01-26'\nimage: ./de_with_dbt.jpg\nfilters:\n  - social-share\nshare:\n  permalink: 'https://tylerhillery.com/notes/data-engineering-with-dbt/'\n  description: null\n  twitter: true\n  facebook: false\n  reddit: true\n  stumble: false\n  tumblr: false\n  linkedin: true\n  email: true\n  mastodon: true\ncategories:\n  - Technical Bookss\nexecute:\n  echo: true\n  error: true\n---\n\n------------------------------------------------------------------------\n# Relevant Links\n- [Book GitHub Repo](https://github.com/PacktPublishing/Data-engineering-with-dbt)\n\n\n# Chapter 1. The Basics of SQL to Transform Data\n\n- Going to skim over this chapter as I already feel very confident with my SQL skills\n\n- The book uses Snowflake but I am going to follow along using BigQuery\n\n- BigQuery datasets are like schemas in other databases\n\n\n# Chapter 2. Setting Up Your dbt Cloud Development Environment\n\n- I am going to use local dbt instead\n\n# Chapter 3. Data Modeling for Data Engineering\n\n- ***Entity***: AN entity is a concept that we want to analyze, a thing of interest that we want to collect data about, such as a car, an order or a page visit\n\n- ***Attribute***: An attribute is a property of an entity for which we want to store values, such as a car plate, a customer, or the total amount of a transaction.\n\n- ***Relationship***: A relationship is a connection between two entities that are related to each other and captures how they are related, such as the ownership relation between a car and its owner, or the purchasing relation between a customer and a product\n\n- Lots of great info in this chapter on different data modeling techniques. I didn't end up taking too many notes as I didn't want to interrupt my flow.\n\n# Chapter 5. Transforming Data with dbt\n\n- You can test specific sources but using `dbt test -s source:source_name.table` \n\n# Chapter 6. Writing Maintainable Code\n\n- Saving history with dbt\n  - You can use the standard dbt *snapshots* which creates **slowly changing dimension of type 2** (SCD2) without writing any of the code. \n    - This can work well for normal-size datasets (up to millions of rows) and is the simplest way to go \n    - One major con of snapshots is that they are global objects, so you only have one copy and one version active for all environments.\n    - Another con is you cannot preview or test the `select` query that feeds the data to the snapshot\n  - Another method is to use *incremental models* to save new or changed data from each run.\n    - applies set-based operations to capture changes in insert-only mode\n    - effective way to manage and store huge amounts of data\n    - requires writing custom macro \n  \n- `Snapshots` are not normal dbt models and they are not run with the `dbt run` command but instead with the `dbt snapshot`.\n\n- `snapshots` are stored in their own folder as they are the only tables that cannot be recreated at every run so you don't want to drop them on accident\n\n- The snapshot table is a global object and is shared by all environments.\n\n- The general layout of a snapshot definition\n\n  ```sql\n  {% snapshot snapshot_name %}\n  {{ config(...) }}\n  select ... from {{ source / ref }}\n  {% endsnapshot %}\n  ```\n\n- Best way to have run snapshots is to have a stg model before them and make them `ephemeral` models so you don't need to run them before the snapshot. This makes it so you don't need to first run only the stg models for the snapshots, take the snapshot and then run all models except the snapshot ones. \n\n# Chapter 7. Working with Dimensional Data\n\nI actually really enjoyed this chapter. I am turning into a fan of this \"Pragmatic Data Platform\" going from stg > snapshot > refined > mart. Didn't take to many notes on this chapter as I mostly following along with my own repo.\n\n# Review\n\nI finished the rest of this book while on the plane so I wasn't able to follow along with the examples like I usually like to with technical books like this. The first few chapters I was not a fan but this was probably because I am pretty familiar with dbt. Once it started getting into more advanced topics I actually really enjoyed it.\n\nIt's nice to learn about the different patterns and ways people are using dbt. I really enjoyed the part on how to create historical tables and I could see myself using so of the macros that were shown in this book. It's important for me to not get complacent with these technologies because they are always evolving. \n\nIt was nice that this book also wasn't less about dbt itself and more about different patterns and principals you can apply and how to apply them with dbt. It would be very easy to use the pragmatic data platform with another tool. \n\nA nit pick I had about the book was how it focused on using dbt Cloud. There were lots of pictures and examples of the cloud UI which I wasn't a fan of.\n\nOverall, I would recommend this book to those looking to how use dbt. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}