---
title: "Effective Python"
description: My notes on [Effective Python](https://a.co/d/49i4S3a) by Brett Slatkin 
author: "Tyler Hillery"
date: "2024-01-08"
image: "./effective_python.jpg"
filters:
  - social-share
share:
  permalink: "https://tylerhillery.com/notes/effective-python/"
  description:
  twitter: true
  facebook: false
  reddit: true
  stumble: false
  tumblr: false
  linkedin: true
  email: true
  mastodon: true
categories: [Technical Books, In Progress]
execute:
  echo: true
  error: true
jupyter: python3
---

------------------------------------------------------------------------

# Preface

- Love the start of this book.

  > This book provides insight into the *Pythonic* way of writing programs: the best way to use python. It builds on a fundamental understanding of the language that I assume you already have. Novice programmers will learn the best practices of Python's capabilities. Experienced programmers will learn how to embrace the strangeness of a new tool with confidence
  
# Chapter 1. Pythonic Thinking

- PEP 8 is commonly referred to the style guide for how to format Python code. I personally like use the [Ruff Formatter](https://docs.astral.sh/ruff/formatter/) so I don't have to worry about if I am properly formatting my code

- You don't need to explicitly test if a container data type length is 0 or > than 1 when using in an `if` statement because an empty container with result in `False` and a container with a length > 0 will result in `True`

- `bytes` contains sequences of 8-bit values, and `str` contains sequences of Unicode code points.

- Why go through the trouble of assigning the default value for the `.get()` to `['']` instead of 0?

  ```{python}
  from urllib.parse import parse_qs 

  my_values = parse_qs("red=5&blue=0&green=",keep_blank_values=True)
  print(my_values)
  green = my_values.get("green", [''])[0] or 0
  green_my_way = my_values.get("green", 0)
  print(f"Green: {green!r}")
  print(f"Green: {green_my_way!r}")
  ```

  Ah I see, it appears the default return value for `parse_qs` if there is no value for the color is a list with an empty string. So that's why we index into the list and if it's `''` which also means `False` we can use the `or 0` to default it to 0 

- Make use of helper functions in Python. Here is an example of how to solve the above problem with a helper function

  ```{python}
  def get_first_int(values, key, default=0):
    found = values.get(key, [''])

    if found[0]:
      return int(found[0])
    return default
  
  green = get_first_int(my_values, "green")

  print(green)
  ```

- You can use unpacking to swap variables in place without need to create temp variables

  ```{python}
  def temp_bubble_sort(a):
    for _ in range(len(a)):
      for i in range(1, len(a)):
        if a[i] < a[i-1]:
          temp = a[i]
          a[i] = a[i-1]
          a[i-1] = temp
      
  def inplace_bubble_sort(a):
    for _ in range(len(a)):
      for i in range(1, len(a)):
        if a[i] < a[i-1]:
          a[i-1], a[i] = a[i], a[i-1] 

  names1 = ["pretzels", "carrots", "arugula", "bacon"]
  names2 = ["pretzels", "carrots", "arugula", "bacon"]

  temp_bubble_sort(names1)
  inplace_bubble_sort(names2)
  print(names1)
  print(names2)
  ```

- 